{"version":3,"sources":["components/display.jsx","components/input.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","this","props","data","map","item","react_default","a","createElement","key","name","className","renderList","Component","Input","MDCTextField","document","querySelector","e","target","value","type","id","onKeyDown","enterHandler","bind","htmlFor","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","ws","WebSocket","onmessage","event","setState","JSON","parse","input_Input","display_Display","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEqBA,uLAGjB,OAAOC,KAAKC,MAAMC,KAAKC,IAAI,SAAAC,GACzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKK,KAAMC,UAAU,YAC7BL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cAAcN,EAAKK,MACjCJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cAAcN,EAAKF,4CAQ3C,OAAOG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAOV,KAAKW,qBAjBDC,oBCChBC,8LAEE,IAAIC,IACrBC,SAASC,cAAc,yDAIdC,GACX,GAAc,UAAVA,EAAET,IAAiB,CACLS,EAAEC,OAAOC,MAEzBF,EAAEC,OAAOC,MAAQ,qCAKnB,OACEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,4CACbL,EAAAC,EAAAC,cAAA,SACEa,KAAK,OACLC,GAAG,gBACHC,UAAWtB,KAAKuB,aAAaC,KAAKxB,MAClCU,UAAU,0BAEZL,EAAAC,EAAAC,cAAA,SAAOG,UAAU,qBAAqBe,QAAQ,iBAA9C,gBAGApB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,4BA3BYE,aCuBpBc,qBApBb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA5B,KAAA0B,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAA5B,KAAA4B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhC,QACKiC,MAAQ,CACX/B,KAAM,IAERyB,EAAKO,GAAK,IAAIC,UAAU,4BACxBR,EAAKO,GAAGE,UAAY,SAAAC,GAClBV,EAAKW,SAAS,CAAEpC,KAAMqC,KAAKC,MAAMH,EAAMnC,SAP7ByB,wEAWZ,OACEtB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,IACbL,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,CAASxC,KAAMF,KAAKiC,MAAM/B,eAfhBU,cCKE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASnC,SAASoC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ce434174.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Display extends Component {\n  renderList() {\n    //[{name:data}]\n    return this.props.data.map(item => {\n      return (\n        <div key={item.name} className=\"col-sm-6\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h3 className=\"card-title\">{item.name}</h3>\n              <h3 className=\"card-title\">{item.data}</h3>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n  render() {\n    return <div className=\"row\">{this.renderList()}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { MDCTextField } from \"@material/textfield\";\n\nexport default class Input extends Component {\n  componentDidMount() {\n    const helperText = new MDCTextField(\n      document.querySelector(\".mdc-text-field\")\n    );\n  }\n\n  enterHandler(e) {\n    if (e.key === \"Enter\") {\n      let userInput = e.target.value;\n      //this.props.updateList(userInput);\n      e.target.value = \"\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"mdc-text-field mdc-text-field--fullwidth\">\n        <input\n          type=\"text\"\n          id=\"my-text-field\"\n          onKeyDown={this.enterHandler.bind(this)}\n          className=\"mdc-text-field__input\"\n        />\n        <label className=\"mdc-floating-label\" htmlFor=\"my-text-field\">\n          Text to show\n        </label>\n        <div className=\"mdc-line-ripple\" />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Display from \"./components/display\";\nimport Input from \"./components/input\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    };\n    this.ws = new WebSocket(\"ws://0.0.0.0:5000/update\");\n    this.ws.onmessage = event => {\n      this.setState({ data: JSON.parse(event.data) });\n    };\n  }\n  render() {\n    return (\n      <div className=\"\">\n        <Input />\n        <Display data={this.state.data} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}